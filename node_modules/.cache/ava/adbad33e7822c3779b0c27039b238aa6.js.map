{"version":3,"sources":["i.js"],"names":["test","require","Queue","capacity","Infinity","_capacity","_values","_head","_tail","_count","prototype","enqueue","value","dequeue","oldFirst","values","i","count","peek","getCount","beforeEach","t","context","zeroCap","smallCap","noCap","act","exp","is","x","console","log","fail"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;;AAEA,SAASC,KAAT,GAAoC;AAAA,QAArBC,QAAqB,uEAAVC,QAAU;;AAChC,SAAKC,SAAL,GAAiBF,QAAjB;AACA,SAAKG,OAAL,GAAe,EAAf;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,CAAd;AACH;;AAEDP,MAAMQ,SAAN,CAAgBC,OAAhB,GAA0B,UAASC,KAAT,EAAgB;AACtC,QAAI,KAAKH,MAAL,IAAgB,KAAKJ,SAAzB,EAAoC;AAChC,eAAO,wCAAP;AACH;;AAED,SAAKC,OAAL,CAAa,KAAKE,KAAL,EAAb,IAA6BI,KAA7B;AACA,WAAO,EAAE,KAAKH,MAAd;AACH,CAPD;;AASAP,MAAMQ,SAAN,CAAgBG,OAAhB,GAA0B,YAAW;AACjC,QAAIC,WAAW,KAAKC,MAAL,CAAY,CAAZ,CAAf;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKC,KAAzB,EAAiCD,GAAjC,EAAuC;AACnC,aAAKD,MAAL,CAAYC,CAAZ,IAAiB,KAAKD,MAAL,CAAYC,IAAE,CAAd,CAAjB;AACH;AACD,WAAO,KAAKD,MAAL,CAAY,KAAKE,KAAL,GAAa,CAAzB,CAAP;AACA,SAAKA,KAAL,IAAc,CAAd;AACA,WAAOH,QAAP;AACH,CARD;;AAUAZ,MAAMQ,SAAN,CAAgBQ,IAAhB,GAAuB,YAAW;AAC9B,WAAO,KAAKH,MAAL,CAAY,CAAZ,CAAP;AACH,CAFD;;AAIAb,MAAMQ,SAAN,CAAgBS,QAAhB,GAA2B,YAAW;AAClC,WAAO,KAAKF,KAAZ;AACH,CAFD;;AAKAjB,KAAKoB,UAAL,CAAiB,aAAK;AAClBC,MAAEC,OAAF,CAAUC,OAAV,GAAoB,IAAIrB,KAAJ,CAAU,CAAV,CAApB;AACAmB,MAAEC,OAAF,CAAUE,QAAV,GAAqB,IAAItB,KAAJ,CAAU,CAAV,CAArB;AACAmB,MAAEC,OAAF,CAAUG,KAAV,GAAkB,IAAIvB,KAAJ,EAAlB;AACH,CAJD;;AAMAF,KAAK,4BAAL,EAAmC,aAAK;AAAA;AAAA;;AACpC,QAAI0B,MAAML,EAAEC,OAAF,CAAUC,OAAV,CAAkBZ,OAAlB,CAA0B,KAA1B,CAAV;AACA,QAAIgB,MAAM,wCAAV;AACAN,MAAEO,EAAF,uBAAKF,GAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,CAJD;;AAMA3B,KAAK,kBAAL,EAAyB,aAAK;AAC1B6B,MAAElB,OAAF,CAAU,KAAV;AACAkB,MAAElB,OAAF,CAAU,KAAV;AACAkB,MAAElB,OAAF,CAAU,OAAV;AACAmB,YAAQC,GAAR,CAAYF,CAAZ;;AAGAR,MAAEW,IAAF;AAEH,CATD","file":"i.js","sourcesContent":["var test = require('ava')\n\nfunction Queue(capacity = Infinity) {\n    this._capacity = capacity\n    this._values = {}\n    this._head = 0\n    this._tail = 0\n    this._count = 0\n}\n\nQueue.prototype.enqueue = function(value) {\n    if (this._count >=  this._capacity) {\n        return \"Error: Max capacity hit - already full\"\n    }\n\n    this._values[this._tail++] = value\n    return ++this._count\n};\n\nQueue.prototype.dequeue = function() {\n    var oldFirst = this.values[0]\n    for (var i = 0; i < this.count;  i++ ) {\n        this.values[i] = this.values[i+1]\n    }\n    delete this.values[this.count - 1]\n    this.count -= 1\n    return oldFirst\n};\n\nQueue.prototype.peek = function() {\n    return this.values[0]\n};\n\nQueue.prototype.getCount = function() {\n    return this.count\n};\n\n\ntest.beforeEach( t => {\n    t.context.zeroCap = new Queue(0)\n    t.context.smallCap = new Queue(3)\n    t.context.noCap = new Queue()\n})\n\ntest('rejects adding to zero cap', t => {\n    var act = t.context.zeroCap.enqueue('one')\n    var exp = \"Error: Max capacity hit - already full\"\n    t.is(act, exp)\n})\n\ntest('enques correctly', t => {\n    x.enqueue('one')\n    x.enqueue('two')\n    x.enqueue('three')\n    console.log(x);\n\n\n    t.fail()\n\n})\n\n\n\n"]}
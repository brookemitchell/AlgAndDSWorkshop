{"version":3,"sources":["bubbleSort.js"],"names":["test","require","bubbleSort","arr","i","length","j","cur","next","t","truthy","act","exp","deepEqual"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;AAAE;;AAExB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,IAAIE,MAAxB,EAAgCD,GAAhC,EAAqC;;AAEjC,aAAK,IAAIE,IAAI,CAAb,EAAgBF,IAAID,IAAIE,MAAxB,EAAgCC,GAAhC,EAAqC;;AAEjC,gBAAIH,IAAIC,CAAJ,IAASD,IAAIG,CAAJ,CAAb,EAAqB;AACjB,oBAAIC,MAAMJ,IAAIC,CAAJ,CAAV;AACA,oBAAII,OAAOL,IAAIG,CAAJ,CAAX;AACAH,oBAAIG,CAAJ,IAASC,GAAT;AACAJ,oBAAIC,CAAJ,IAASI,IAAT;AACH;AAEJ;AACJ;AACD,WAAOL,GAAP;AACH;;AAEDH,KAAK,uBAAL,EAA8B,aAAK;AAAA;AAAA;AAAA;;AAC/B,QAAIG,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAM,MAAEC,MAAF,uBAASR,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIS,MAAMT,WAAWC,GAAX,CAAV;AACA,QAAIS,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAH,MAAEI,SAAF,yBAAYF,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,CAVD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\nfunction bubbleSort (arr) { //n^2\n\n    for (var i = 0; i < arr.length; i++) {\n\n        for (var j = 1; i < arr.length; j++) {\n\n            if (arr[i] > arr[j]) {\n                var cur = arr[i]\n                var next = arr[j]\n                arr[j] = cur\n                arr[i] = next\n            }\n\n        }\n    }\n    return arr\n}\n\ntest('implement bubble sort', t => {\n    var arr = [3, 5, 1]\n\n    t.truthy(bubbleSort)\n\n    var act = bubbleSort(arr)\n    var exp = [1, 3, 5]\n\n    t.deepEqual(act, exp)\n\n})\n"]}
{"version":3,"sources":["linkedList2.js"],"names":["test","require","Node","value","next","LinkedList","headValue","undefined","console","log","head","tail","prototype","forEach","callback","node","act","res","push","e","exp","t","deepEqual","print","insertAfter","removeAfter","insertHead","removeHead","findNode","appendToTail","insertBefore","removeBefore"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;;AAEA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKD,KAAL,GAAaA,KAAb;AACD;;AAED,SAASE,UAAT,CAAoBC,SAApB,EAA+B;AAC7B,MAAIA,cAAcC,SAAlB,EAA6BC,QAAQC,GAAR,CAAY,mCAAZ;AAC7B,OAAKC,IAAL,GAAY,IAAIR,IAAJ,CAASI,SAAT,CAAZ;AACA,OAAKK,IAAL,GAAY,KAAKD,IAAjB;AACD;;AAEDL,WAAWO,SAAX,CAAqBC,OAArB,GAA+B,UAASC,QAAT,EAAmB;AAChD,MAAIC,OAAO,KAAKL,IAAhB;AACA,SAAOK,IAAP,EAAa;AACXD,aAASC,KAAKZ,KAAd;AACAY,WAAOA,KAAKX,IAAZ;AACD;AACF,CAND;;AAQAJ,KAAK,UAAL,EAAiB,aAAK;AAAA;AAAA;;AACpB,MAAIgB,MAAM,IAAIX,UAAJ,CAAe,CAAf,CAAV;AACA,MAAIY,MAAM,EAAV;AACAD,MAAIH,OAAJ,CAAY;AAAA,WAAKI,IAAIC,IAAJ,CAASC,IAAI,CAAb,CAAL;AAAA,GAAZ;AACAX,UAAQC,GAAR,CAAYQ,GAAZ;AACA,MAAIG,MAAM,IAAIf,UAAJ,CAAe,CAAf,CAAV;;AAEAgB,IAAEC,SAAF,uBAAYN,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAiBI,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CARD;AASA;;AAEAf,WAAWO,SAAX,CAAqBW,KAArB,GAA6B,YAAW;AACtC;AACD,CAFD;AAGA;;AAEAlB,WAAWO,SAAX,CAAqBY,WAArB,GAAmC,UAAST,IAAT,EAAeZ,KAAf,EAAsB;AACvD;AACD,CAFD;AAGA;;AAEAE,WAAWO,SAAX,CAAqBa,WAArB,GAAmC,UAASV,IAAT,EAAe;AAChD;AACD,CAFD;AAGA;;AAEAV,WAAWO,SAAX,CAAqBc,UAArB,GAAkC,UAASvB,KAAT,EAAgB;AAChD;AACD,CAFD;AAGA;;AAEAE,WAAWO,SAAX,CAAqBe,UAArB,GAAkC,YAAW;AAC3C;AACD,CAFD;;AAIAtB,WAAWO,SAAX,CAAqBgB,QAArB,GAAgC,UAASzB,KAAT,EAAgB;AAC9C;AACD,CAFD;AAGA;;AAEAE,WAAWO,SAAX,CAAqBiB,YAArB,GAAoC,UAAS1B,KAAT,EAAgB;AAClD;AACD,CAFD;AAGA;;;AAGA;;AAEAE,WAAWO,SAAX,CAAqBkB,YAArB,GAAoC,UAASf,IAAT,EAAeZ,KAAf,EAAsB;AACxD;AACD,CAFD;AAGA;;AAEAE,WAAWO,SAAX,CAAqBmB,YAArB,GAAoC,UAAShB,IAAT,EAAe;AACjD;AACD,CAFD;AAGA;;;AAIA","file":"linkedList2.js","sourcesContent":["/*\n\nLINKED LIST\n\nComprised of nodes that represent a sequence.\nEach node is composed of data and a reference/link to the next node.\n\n\n*** Operations:\n\n** Part 1\n\nmyList.forEach(callbackFn)\ninvoke callback function with the value of each node\n\nmyList.print()\n=> string with all values in list (ex: '0, 1, 2, 3')\n\nmyList.insertAfter(refNode, value)\n=> new node\ninsert new node associated with value passed in after refNode\n\nmyList.removeAfter(refNode)\n=> removed node\nremove node after the refNode\n\nmyList.insertHead(value)\n=> new head\ninsert new head node at the beginning of the list with the value passed in\n\nmyList.removeHead()\n=> removed head node\nremove the head node of the linked list\n\nmyList.findNode(value)\n=> first node that has a value matching what was passed in\n\n\n* Optimization:\nSay we have a linked list that has 100 items and we want to add an item to the very end. How would you do that with your current implementation? How can you modify the data structure to add an item to the end in constant time?\n\nmyList.appendToTail(value)\n=> new tail node\nadd a new tail node at the end of the list with the associated value passed in\n\nmyList.removeTail()\n=> removed tail node\nremove the tail node from the list\n\n\n** Part 2\n\nNow let's think about creating insertBefore and removeBefore methods for the nodes in our list. Can you think of an efficient way to do so?\n\nThink about time complexity. What would it be for your current implementation of a linked list?\n\nHow can we modify our data structures (Node and Linked List classes) so that we can make these O(1) operations?\n\nOnce you've come up with a plan, implement the following methods.\n\nmyList.insertBefore(refNode, value)\n=> new node inserted\ninsert new node with associated value before refNode\n\nmyList.removeBefore(refNode)\n=> removed node\nremove node before the refNode passed in\n\n\n*** Additional Exercises:\n\nImplement a circularly linked list:\nhttps://en.wikipedia.org/wiki/Linked_list#Circularly_linked_list\n\nReimplement stack and queue data structures using linked lists.\n */\n\n// PART 1\n\nvar test = require('ava')\n\nfunction Node(value) {\n  this.next = null;\n  this.value = value;\n}\n\nfunction LinkedList(headValue) {\n  if (headValue === undefined) console.log('Must provide value for first node');\n  this.head = new Node(headValue);\n  this.tail = this.head\n}\n\nLinkedList.prototype.forEach = function(callback) {\n  var node = this.head\n  while (node) {\n    callback(node.value)\n    node = node.next\n  }\n};\n\ntest('actually', t => {\n  var act = new LinkedList(1)\n  var res = []\n  act.forEach(e => res.push(e * 2))\n  console.log(res);\n  var exp = new LinkedList(2)\n\n  t.deepEqual(act, exp)\n} )\n// Time complexity:\n\nLinkedList.prototype.print = function() {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.insertAfter = function(node, value) {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.removeAfter = function(node) {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.insertHead = function(value) {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.removeHead = function() {\n  // implement me...\n}\n\nLinkedList.prototype.findNode = function(value) {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.appendToTail = function(value) {\n  // implement me...\n};\n// Time complexity:\n\n\n// PART 2:\n\nLinkedList.prototype.insertBefore = function(node, value) {\n  // implement me...\n};\n// Time complexity:\n\nLinkedList.prototype.removeBefore = function(node) {\n  // implement me...\n};\n// Time complexity:\n\n\n\n/*\n*** Exercises:\n\n1. Implement a stack using a linked list.\n\n2. Implement a queue using a linked list.\n\n3. Write a method that remove duplicates from an unsorted linked list. What is the time complexity? Re-implement the method without using any additional storage structure (constant space complexity). What is the time complexity?\n\n4. Reverse a linked list. Do not use any additional storage structures.\n\n5. Find the kth to last element of a singly linked list.\n\n6. Detect if a linked list has a loop.\n\n7. Check if a linked list is a palindrome.\n\n8. Given two linked lists that represent numbers, return a linked list that represents the sum of those numbers:\n  4 2 5        (4 -> 2 -> 5)\n+ 7 3 1        (7 -> 3 -> 1)\n--------\n1 1 5 6   (1 -> 1 -> 5 -> 6)\n\n */\n"]}
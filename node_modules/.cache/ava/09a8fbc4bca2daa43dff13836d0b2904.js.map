{"version":3,"sources":["stackObjectExercises.test.js"],"names":["test","require","Stack","beforeEach","t","context","s0","s1","push","fail"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA,IAAIC,QAAQD,QAAQ,kBAAR,CAAZ;AACA;;AAEAD,KAAKG,UAAL,CAAgB,aAAK;AACjBC,MAAEC,OAAF,CAAUC,EAAV,GAAe,IAAIJ,KAAJ,CAAU,CAAV,CAAf;AACAE,MAAEC,OAAF,CAAUE,EAAV,GAAe,IAAIL,KAAJ,CAAU,CAAV,CAAf;AACA;AACAE,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,KAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,KAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,OAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,MAAlB;AACH,CARD;;AAUAR,KAAK,sBAAL,EAA6B,aAAK;;AAE9BI,MAAEK,IAAF;AACH,CAHD","file":"stackObjectExercises.test.js","sourcesContent":["var test = require('ava')\nvar Stack = require('./stackObject.js')\n// 1. Implement a stack with a min method which returns the minimum element currently in the stack. This method should have O(1) time complexity. Make sure your implementation handles duplicates.\n\ntest.beforeEach(t => {\n    t.context.s0 = new Stack(0)\n    t.context.s1 = new Stack(3)\n    // t.context.s2 = new Stack(5)\n    t.context.s1.push('one')\n    t.context.s1.push('two')\n    t.context.s1.push('three')\n    t.context.s1.push('four')\n})\n\ntest('implement min method', t => {\n    \n    t.fail()\n})\n"]}
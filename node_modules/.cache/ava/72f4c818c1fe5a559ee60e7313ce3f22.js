'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');

function Queue() {
    var capacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;

    this._capacity = capacity;
    this._values = {};
    this._head = '0';
    this._tail = '0';
    this._count = 0;
}

Queue.prototype.enqueue = function (value) {
    if (this._count >= this._capacity) {
        return "Error: Max capacity hit - already full";
    }

    this._values[this._tail++] = value;
    return ++this._count;
};

Queue.prototype.dequeue = function () {
    var oldFirst = this._values[this._head];

    delete this._values[this._head];
    this._head++;
    this._count = this._count === 0 ? this._count : this._count - 1;
    return oldFirst;
};

Queue.prototype.peek = function () {
    return this._values[this._head];
};

Queue.prototype.getCount = function () {
    return this._count;
};

test.beforeEach(function (t) {
    t.context.zeroCap = new Queue(0);
    t.context.smallCap = new Queue(3);
    t.context.noCap = new Queue();

    var sm = t.context.smallCap;
    sm.enqueue('one');
    sm.enqueue('two');
    sm.enqueue('three');
});

test('dequeues correctly', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder();

    var sm = t.context.smallCap;
    t.is(_rec._expr(_rec._capt(_rec._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'one\')',
        filepath: 'i.js',
        line: 50,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"one","range":[19,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"one","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'one');
    t.is(_rec2._expr(_rec2._capt(_rec2._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'two\')',
        filepath: 'i.js',
        line: 51,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"two","range":[19,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"two","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'two');
    t.is(_rec3._expr(_rec3._capt(_rec3._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'three\')',
        filepath: 'i.js',
        line: 52,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"three","range":[19,26]}],"range":[0,27]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"three","range":[19,26]},{"type":{"label":")"},"range":[26,27]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'three');
    t.is(_rec4._expr(_rec4._capt(_rec4._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), undefined)',
        filepath: 'i.js',
        line: 53,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"Identifier","name":"undefined","range":[19,28]}],"range":[0,29]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"undefined","range":[19,28]},{"type":{"label":")"},"range":[28,29]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec5._expr(_rec5._capt(undefined, 'arguments/1'), {
        content: 't.is(sm.dequeue(), undefined)',
        filepath: 'i.js',
        line: 53,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"Identifier","name":"undefined","range":[19,28]}],"range":[0,29]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"undefined","range":[19,28]},{"type":{"label":")"},"range":[28,29]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});

test('dequeues correctly', function (t) {
    var _rec6 = new _powerAssertRecorder(),
        _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var sm = t.context.smallCap;
    t.is(_rec6._expr(_rec6._capt(_rec6._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'one\')',
        filepath: 'i.js',
        line: 59,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"one","range":[19,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"one","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'one');
    t.is(_rec7._expr(_rec7._capt(_rec7._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'two\')',
        filepath: 'i.js',
        line: 60,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"two","range":[19,24]}],"range":[0,25]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"two","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'two');
    t.is(_rec8._expr(_rec8._capt(_rec8._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), \'three\')',
        filepath: 'i.js',
        line: 61,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"StringLiteral","value":"three","range":[19,26]}],"range":[0,27]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"three","range":[19,26]},{"type":{"label":")"},"range":[26,27]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'three');
    t.is(_rec9._expr(_rec9._capt(_rec9._capt(sm, 'arguments/0/callee/object').dequeue(), 'arguments/0'), {
        content: 't.is(sm.dequeue(), undefined)',
        filepath: 'i.js',
        line: 62,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"Identifier","name":"undefined","range":[19,28]}],"range":[0,29]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"undefined","range":[19,28]},{"type":{"label":")"},"range":[28,29]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec10._expr(_rec10._capt(undefined, 'arguments/1'), {
        content: 't.is(sm.dequeue(), undefined)',
        filepath: 'i.js',
        line: 62,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"sm","range":[5,7]},"property":{"type":"Identifier","name":"dequeue","range":[8,15]},"computed":false,"range":[5,15]},"arguments":[],"range":[5,17]},{"type":"Identifier","name":"undefined","range":[19,28]}],"range":[0,29]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"sm","range":[5,7]},{"type":{"label":"."},"range":[7,8]},{"type":{"label":"name"},"value":"dequeue","range":[8,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":")"},"range":[16,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"undefined","range":[19,28]},{"type":{"label":")"},"range":[28,29]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});

test('rejects adding to zero cap', function (t) {
    var _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder();

    var act = t.context.zeroCap.enqueue('one');
    var exp = 'Error: Max capacity hit - already full';
    t.is(_rec11._expr(_rec11._capt(act, 'arguments/0'), {
        content: 't.is(act, exp)',
        filepath: 'i.js',
        line: 69,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec12._expr(_rec12._capt(exp, 'arguments/1'), {
        content: 't.is(act, exp)',
        filepath: 'i.js',
        line: 69,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});

test('enques correctly', function (t) {
    var _rec13 = new _powerAssertRecorder(),
        _rec14 = new _powerAssertRecorder();

    var sm = t.context.smallCap;

    var act = t.context.smallCap._values['2'];
    var exp = 'three';

    t.is(_rec13._expr(_rec13._capt(act, 'arguments/0'), {
        content: 't.is(act, exp)',
        filepath: 'i.js',
        line: 78,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec14._expr(_rec14._capt(exp, 'arguments/1'), {
        content: 't.is(act, exp)',
        filepath: 'i.js',
        line: 78,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});
//# sourceMappingURL=node_modules/.cache/ava/72f4c818c1fe5a559ee60e7313ce3f22.js.map
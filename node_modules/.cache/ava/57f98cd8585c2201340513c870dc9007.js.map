{"version":3,"sources":["stackObjectExercises.test.js"],"names":["test","require","Stack","beforeEach","t","context","s0","s1","push","is","min","act","exp"],"mappings":";;;;;;;;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA,IAAIC,QAAQD,QAAQ,kBAAR,CAAZ;AACA;;AAEAD,KAAKG,UAAL,CAAgB,aAAK;AACjBC,MAAEC,OAAF,CAAUC,EAAV,GAAe,IAAIJ,KAAJ,CAAU,CAAV,CAAf;AACAE,MAAEC,OAAF,CAAUE,EAAV,GAAe,IAAIL,KAAJ,CAAU,CAAV,CAAf;AACA;AACAE,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,CAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,CAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,CAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,CAAlB;AACAJ,MAAEC,OAAF,CAAUE,EAAV,CAAaC,IAAb,CAAkB,CAAlB;AACH,CATD;;AAWAR,KAAK,sBAAL,EAA6B,aAAK;AAAA;AAAA;AAAA;;AAAA,QAEzBO,EAFyB,GAEnBH,EAAEC,OAFiB,CAEzBE,EAFyB;;AAG9BH,MAAEK,EAAF,wDAAY,8CAAGC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoB,UAApB;;AAEA,QAAIC,MAAMJ,GAAGG,GAAH,EAAV;AACA,QAAIE,MAAM,CAAV;;AAEAR,MAAEK,EAAF,yBAAKE,GAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,CAVD","file":"stackObjectExercises.test.js","sourcesContent":["var test = require('ava')\nvar Stack = require('./stackObject.js')\n// 1. Implement a stack with a min method which returns the minimum element currently in the stack. This method should have O(1) time complexity. Make sure your implementation handles duplicates.\n\ntest.beforeEach(t => {\n    t.context.s0 = new Stack(0)\n    t.context.s1 = new Stack(3)\n    // t.context.s2 = new Stack(5)\n    t.context.s1.push(3)\n    t.context.s1.push(1)\n    t.context.s1.push(3)\n    t.context.s1.push(4)\n    t.context.s1.push(4)\n})\n\ntest('implement min method', t => {\n    \n    var {s1} = t.context\n    t.is(typeof s1.min, 'function')\n\n    var act = s1.min()\n    var exp = 1\n\n    t.is(act, exp)\n\n})\n"]}
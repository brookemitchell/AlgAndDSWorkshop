{"version":3,"sources":["i.js"],"names":["test","require","one","loopN","n","console","log","act","exp","t","pass","exponent","base","expo","is","recursiveMultiplier","arr","num","start","end","length","concat","slice","only","act2","act3","act4","exp2","exp3","exp4","deepEqual"],"mappings":"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","file":"i.js","sourcesContent":["var test = require('ava')\n\nvar one = ` Write a function that loops through the numbers n down to 0. If you haven't done so try using a while loop to do this. `\n\nfunction loopN (n) {\n    console.log(n);\n    if (n <= 0) {\n        return n\n    }\n    loopN(n - 1)\n}\n\ntest( one, t => {\n    var act = loopN(3)\n    var exp = 0\n\n\n    t.pass()\n}  )\n\nfunction exponent(base, expo) {\n    if (expo === 1 ) {\n        return base\n    }\n\n    return base * exponent(base, expo - 1)\n}\n\n\n//3.Write a function 'exponent' that takes two arguments base, and expo, uses a while loop to return the exponenet value of the base.\n\ntest('exponent', t => {\n    var act = exponent(3, 3)\n    var exp = 27\n    t.is(act, exp)\n\n})\n\n//5. Write a function 'recursiveMultiplier' that takes two arguments, 'arr and num', and multiplies each arr value into by num and returns an array of the values.\nfunction recursiveMultiplier(arr, num) {\n    var start = 0\n    var end = arr.length - 1\n    if ( arr.length === 0 ) {\n        return arr\n    }\n\n    if (arr.length === 1 ) {\n        return [ arr[0] * num ]\n    }\n\n    return [arr[0] * num].concat(recursiveMultiplier(arr.slice(1), num))\n}\n\n\ntest.only('recursiveMultiplier', t => {\n    var act = recursiveMultiplier([1, 2, 3], 3)\n    var act2 = recursiveMultiplier([1, 1, 1], 4)\n    var act3 = recursiveMultiplier([1], 3)\n    var act4 = recursiveMultiplier([], 3)\n    var exp = [3, 6, 9]\n    var exp2 = [4, 4, 4]\n    var exp3 = [3]\n    var exp4 = []\n    t.deepEqual(act, exp)\n    t.deepEqual(act2, exp2)\n    t.deepEqual(act3, exp3)\n    t.deepEqual(act4, exp4)\n\n})\n"]}
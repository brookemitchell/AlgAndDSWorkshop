{"version":3,"sources":["stackObject.js"],"names":["Stack","capacity","storage","last","undefined","count","prototype","push","value","pop","oldLast","peek","findMe","el","i","until","val","jumps","module","exports"],"mappings":";;;;;;;;;;;;AAAA,SAASA,KAAT,CAAeC,QAAf,EAAyB;AACrB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,IAAL,GAAYC,SAAZ;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACH;;AAEDD,MAAMM,SAAN,CAAgBC,IAAhB,GAAuB,UAASC,KAAT,EAAgB;;AAEnC,QAAI,KAAKH,KAAL,IAAc,KAAKJ,QAAvB,EAAiC;AAC7B,eAAO,uEAAP;AACH;;AAED,SAAKC,OAAL,GAAe,sBAAc,KAAKA,OAAnB,oCACV,KAAKG,KADK,EACIG,KADJ,EAAf;AAGA,SAAKL,IAAL,GAAYK,KAAZ;AACA,SAAKH,KAAL,IAAc,CAAd;AACA,WAAO,KAAKA,KAAZ;AAEH,CAbD;AAcA;;AAEAL,MAAMM,SAAN,CAAgBG,GAAhB,GAAsB,YAAW;AAC7B;AACA,QAAIC,UAAU,KAAKP,IAAnB;AACA,SAAKE,KAAL,IAAc,CAAd;AACA,WAAO,KAAKH,OAAL,CAAa,KAAKG,KAAlB,CAAP;AACA,SAAKF,IAAL,GAAY,KAAKD,OAAL,CAAa,KAAKG,KAAL,GAAa,CAA1B,CAAZ;AACA,WAAOK,OAAP;AACH,CAPD;AAQA;;AAEAV,MAAMM,SAAN,CAAgBK,IAAhB,GAAuB,YAAW;AAC9B,WAAO,KAAKR,IAAZ;AACH,CAFD;AAGA;;AAEAH,MAAMM,SAAN,CAAgBD,KAAhB,GAAwB,YAAW;AAC/B,WAAO,KAAKA,KAAZ;AACH,CAFD;;AAIAL,MAAMM,SAAN,CAAgBM,MAAhB,GAAyB,UAAWC,EAAX,EAAe;;AAEpC,QAAI,CAAC,KAAKV,IAAV,EAAgB;AACZ,eAAO,KAAP;AACH;;AAED,SAAK,IAAIW,IAAI,KAAKT,KAAL,GAAa,CAA1B,EAA6BS,KAAK,CAAlC,EAAqCA,GAArC,EAA2C;AACvC,YAAI,KAAKZ,OAAL,CAAaY,CAAb,KAAmBD,EAAvB,EAA2B;AACvB,mBAAO,IAAP;AACH;AACJ;AACD,WAAO,KAAP;AAEH,CAbD;;AAeAb,MAAMM,SAAN,CAAgBS,KAAhB,GAAwB,SAASA,KAAT,CAAgBC,GAAhB,EAAqB;;AAEzC,QAAI,KAAKX,KAAL,KAAe,CAAnB,EAAuB;AACnB,eAAO,KAAP;AACH;;AAED,QAAIY,QAAQ,CAAZ;;AAEA,SAAK,IAAIH,IAAI,KAAKT,KAAL,GAAa,CAA1B,EAA6BS,KAAK,CAAlC,EAAqCA,GAArC,EAA0C;AACtC,YAAI,KAAKZ,OAAL,CAAaY,CAAb,MAAoBE,GAAxB,EAA6B;AACzB,mBAAOC,KAAP;AACH;AACDA;AACH;AACD,WAAO,KAAP;AAGH,CAjBD;;AAmBAC,OAAOC,OAAP,GAAiBnB,KAAjB","file":"stackObject.js","sourcesContent":["function Stack(capacity) {\n    // implement me...\n    this.storage = {}\n    this.last = undefined\n    this.count = 0\n    this.capacity = capacity\n}\n\nStack.prototype.push = function(value) {\n\n    if (this.count >= this.capacity) {\n        return \"Max capacity already reached. Remove element before adding a new one.\"\n    }\n\n    this.storage = Object.assign(this.storage, {\n        [this.count] : value,\n    })\n    this.last = value\n    this.count += 1\n    return this.count\n\n};\n// Time complexity:\n\nStack.prototype.pop = function() {\n    // implement me...\n    var oldLast = this.last\n    this.count -= 1\n    delete this.storage[this.count]\n    this.last = this.storage[this.count - 1]\n    return oldLast\n};\n// Time complexity:\n\nStack.prototype.peek = function() {\n    return this.last\n};\n// Time complexity:\n\nStack.prototype.count = function() {\n    return this.count\n};\n\nStack.prototype.findMe = function  (el) {\n\n    if (!this.last) {\n        return false\n    }\n\n    for (var i = this.count - 1; i >= 0; i-- ) {\n        if (this.storage[i] == el) {\n            return true\n        }\n    }\n    return false\n\n}\n\nStack.prototype.until = function until (val) {\n\n    if (this.count === 0 ) {\n        return false\n    }\n\n    var jumps = 1\n\n    for (var i = this.count - 1; i >= 0; i--) {\n        if (this.storage[i] === val) {\n            return jumps\n        }\n        jumps++\n    }\n    return false\n\n\n}\n\nmodule.exports = Stack\n"]}
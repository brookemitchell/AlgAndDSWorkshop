{"version":3,"sources":["i.js"],"names":["test","require","Queue","capacity","Infinity","_capacity","_values","_head","_tail","_count","prototype","enqueue","value","dequeue","oldFirst","peek","values","getCount","count","beforeEach","t","context","zeroCap","smallCap","noCap","sm","is","undefined","act","exp"],"mappings":"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","file":"i.js","sourcesContent":["var test = require('ava')\n\nfunction Queue(capacity = Infinity) {\n    this._capacity = capacity\n    this._values = {}\n    this._head = '0'\n    this._tail = '0'\n    this._count = 0\n}\n\nQueue.prototype.enqueue = function(value) {\n    if (this._count >=  this._capacity) {\n        return \"Error: Max capacity hit - already full\"\n    }\n\n    this._values[this._tail++] = value\n    return ++this._count\n};\n\nQueue.prototype.dequeue = function() {\n    var oldFirst = this._values[this._head]\n\n    delete this._values[this._head]\n    this._head++\n    this._count = this._count  === 0 ? this._count : this._count -1\n    return oldFirst\n};\n\nQueue.prototype.peek = function() {\n    return this.values[0]\n};\n\nQueue.prototype.getCount = function() {\n    return this.count\n};\n\ntest.beforeEach( t => {\n    t.context.zeroCap = new Queue(0)\n    t.context.smallCap = new Queue(3)\n    t.context.noCap = new Queue()\n\n    var sm = t.context.smallCap\n    sm.enqueue('one')\n    sm.enqueue('two')\n    sm.enqueue('three')\n})\n\ntest('dequeues correctly', t => {\n    var sm = t.context.smallCap\n    t.is(sm.dequeue(), 'one')\n    t.is(sm.dequeue(), 'two')\n    t.is(sm.dequeue(), 'three')\n    t.is(sm.dequeue(), undefined)\n\n})\n\ntest('rejects adding to zero cap', t => {\n    var act = t.context.zeroCap.enqueue('one')\n    var exp = 'Error: Max capacity hit - already full'\n    t.is(act, exp)\n})\n\ntest('enques correctly', t => {\n    var sm = t.context.smallCap\n\n    var act = t.context.smallCap._values['2']\n    var exp = 'three'\n\n    t.is(act, exp)\n\n})\n\n\n\n"]}
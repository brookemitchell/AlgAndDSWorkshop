{"version":3,"sources":["stackObjectExercises.test.js"],"names":["test","require","Stack","beforeEach","t","context","s0","s1","s2","push"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA,IAAIC,QAAQD,QAAQ,kBAAR,CAAZ;AACA;;AAEAD,KAAKG,UAAL,CAAgB,aAAK;AACjBC,MAAEC,OAAF,CAAUC,EAAV,GAAe,IAAIJ,KAAJ,CAAU,CAAV,CAAf;AACAE,MAAEC,OAAF,CAAUE,EAAV,GAAe,IAAIL,KAAJ,CAAU,CAAV,CAAf;AACAE,MAAEC,OAAF,CAAUG,EAAV,GAAe,IAAIN,KAAJ,CAAU,EAAV,CAAf;AACAE,MAAEC,OAAF,CAAUE,EAAV,CAAaE,IAAb,CAAkB,CAAlB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAjBD;;AAmBAT,KAAK,sBAAL,EAA6B,aAAK;;AAE9B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACH,CAfD","file":"stackObjectExercises.test.js","sourcesContent":["var test = require('ava')\nvar Stack = require('./stackObject.js')\n// 1. Implement a stack with a min method which returns the minimum element currently in the stack. This method should have O(1) time complexity. Make sure your implementation handles duplicates.\n\ntest.beforeEach(t => {\n    t.context.s0 = new Stack(0)\n    t.context.s1 = new Stack(5)\n    t.context.s2 = new Stack(10)\n    t.context.s1.push(3)\n    // t.context.s1.push(1)\n    // t.context.s1.push(3)\n    // t.context.s1.push(4)\n    // t.context.s1.push(4)\n\n    // t.context.s1.push(9)\n    // t.context.s1.push(13)\n    // t.context.s1.push(8)\n    // t.context.s1.push(81)\n    // t.context.s1.push(4)\n    // t.context.s1.push(4)\n    // t.context.s1.push(8)\n})\n\ntest('implement min method', t => {\n\n    // var {s1} = t.context\n    // t.is(typeof s1.min, 'function')\n\n    // var act = s1.min()\n    // var exp = 1\n\n    // t.is(act, exp)\n\n    // var act1 = s1.min()\n    // var exp1 = 4\n\n    // console.log(s1._min);\n    // t.is(act1, exp1)\n})\n"]}
{"version":3,"sources":["i.js"],"names":["test","require","Queue","capacity","_capacity","Infinity","_values","_head","_tail","_count","prototype","enqueue","value","count","dequeue","oldFirst","values","i","peek","getCount","x"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;;AAEA,SAASC,KAAT,CAAeC,QAAf,EAAyB;AACrB,SAAKC,SAAL,GAAiBD,YAAYE,QAA7B;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,CAAd;AACH;;AAEDP,MAAMQ,SAAN,CAAgBC,OAAhB,GAA0B,UAASC,KAAT,EAAgB;AACtC,QAAI,KAAKC,KAAL,IAAe,KAAKV,QAAxB,EAAkC;AAC9B,eAAO,wCAAP;AACH;;AAED,SAAKG,OAAL,CAAa,KAAKE,KAAL,EAAb,IAA6BI,KAA7B;AACA,WAAO,KAAKH,MAAZ;AACH,CAPD;;AASAP,MAAMQ,SAAN,CAAgBI,OAAhB,GAA0B,YAAW;AACjC,QAAIC,WAAW,KAAKC,MAAL,CAAY,CAAZ,CAAf;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,KAAzB,EAAiCI,GAAjC,EAAuC;AACnC,aAAKD,MAAL,CAAYC,CAAZ,IAAiB,KAAKD,MAAL,CAAYC,IAAE,CAAd,CAAjB;AACH;AACD,WAAO,KAAKD,MAAL,CAAY,KAAKH,KAAL,GAAa,CAAzB,CAAP;AACA,SAAKA,KAAL,IAAc,CAAd;AACA,WAAOE,QAAP;AACH,CARD;;AAUAb,MAAMQ,SAAN,CAAgBQ,IAAhB,GAAuB,YAAW;AAC9B,WAAO,KAAKF,MAAL,CAAY,CAAZ,CAAP;AACH,CAFD;;AAIAd,MAAMQ,SAAN,CAAgBS,QAAhB,GAA2B,YAAW;AAClC,WAAO,KAAKN,KAAZ;AACH,CAFD;;AAIA,IAAIO,IAAI,IAAIlB,KAAJ,CAAU,CAAV,CAAR;;AAEAkB,EAAET,OAAF,CAAU,IAAV;AACAS,EAAET,OAAF,CAAU,OAAV;AACAS,EAAET,OAAF,CAAU,IAAV","file":"i.js","sourcesContent":["var test = require('ava')\n\nfunction Queue(capacity) {\n    this._capacity = capacity || Infinity\n    this._values = {}\n    this._head = 0\n    this._tail = 0\n    this._count = 0\n}\n\nQueue.prototype.enqueue = function(value) {\n    if (this.count >=  this.capacity) {\n        return \"Error: Max capacity hit - already full\"\n    }\n\n    this._values[this._tail++] = value\n    return this._count\n};\n\nQueue.prototype.dequeue = function() {\n    var oldFirst = this.values[0]\n    for (var i = 0; i < this.count;  i++ ) {\n        this.values[i] = this.values[i+1]\n    }\n    delete this.values[this.count - 1]\n    this.count -= 1\n    return oldFirst\n};\n\nQueue.prototype.peek = function() {\n    return this.values[0]\n};\n\nQueue.prototype.getCount = function() {\n    return this.count\n};\n\nvar x = new Queue(2)\n\nx.enqueue('as')\nx.enqueue('oiiou')\nx.enqueue('as')\n\n"]}
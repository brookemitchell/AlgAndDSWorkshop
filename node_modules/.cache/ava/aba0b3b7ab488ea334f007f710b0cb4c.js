'use strict';

var test = require('ava');

function Queue(capacity) {
    this._capacity = capacity || Infinity;
    this._values = {};
    this._head = 0;
    this._tail = 0;
    this._count = 0;
}

Queue.prototype.enqueue = function (value) {
    if (this.count >= this.capacity) {
        return "Error: Max capacity hit - already full";
    }

    this._values[this._tail++] = value;
    return this._count;
};

Queue.prototype.dequeue = function () {
    var oldFirst = this.values[0];
    for (var i = 0; i < this.count; i++) {
        this.values[i] = this.values[i + 1];
    }
    delete this.values[this.count - 1];
    this.count -= 1;
    return oldFirst;
};

Queue.prototype.peek = function () {
    return this.values[0];
};

Queue.prototype.getCount = function () {
    return this.count;
};

test.beforeEach(function (t) {
    var zeroCap = new Queue(0);
    var smallCap = new Queue(3);
    var noCap = new Queue();
});

test.only('rejects adding to zero cap', function (t) {

    var act = zeroCap.enqueue('one');
    t.fail();
});

test('enques correctly', function (t) {
    x.enqueue('one');
    x.enqueue('two');
    x.enqueue('three');
    console.log(x);

    t.fail();
});
//# sourceMappingURL=node_modules/.cache/ava/aba0b3b7ab488ea334f007f710b0cb4c.js.map
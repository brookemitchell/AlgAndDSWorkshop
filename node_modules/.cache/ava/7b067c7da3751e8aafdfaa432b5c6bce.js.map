{"version":3,"sources":["merge.js"],"names":["test","require","array","act","split","exp","t","deepEqual","fail"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;;AAEAD,KAAK,uBAAL,EAA8B,aAAK;AAAA;AAAA;;AAE/B,QAAIE,QAAQ,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAZ;AACA,QAAMC,MAAMC,MAAMF,KAAN,CAAZ;AACA,QAAMG,MAAM,CAAE,CAAC,CAAD,EAAG,CAAH,GAAO,GAAE,CAAF,EAAI,CAAX,EAAF,CAAZ;;AAEAC,MAAEC,SAAF,uBAAYJ,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiBE,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEAC,MAAEE,IAAF;AAEH,CAVD","file":"merge.js","sourcesContent":["/*\nMERGE SORT\n*** Description\nMerge sort employs a divide and conquer strategy - merge two sorted subarrays into one sorted array.\nRecursive top-down approach:\nRecursively break down array into two subarrays and sort them recursively. Subarrays are broken down until they have only 1 element (implying they are sorted).\nIterative bottom-up approach:\nSplit array into sublists of size 1, merge adjacent sublists into sorted lists, repeat until no more sublists.\n*** Exercises\n- Implement recursive merge sort (you might want to write a helper function to handle the merge step)\n- Implement iterative merge sort\n- Identify time complexity\n- Modify function to take comparator function. specify default if not provided (check out native Array.sort comparator function for reference)\n- Use your comparator function to verify that your sort is stable by taking input: [{value: 15}, {value: 10, order: 1}, {value: 10, order: 2}]\nOptimization:\n- Refactor your iterative solution to be a natural merge sort. This means that the initial subarrays are naturally occurring sorted sequences. How does this impact time complexity and adaptivity?\nex:\ninput array: [ 1 2 4 5 9 ]\nsubarrays for regular merge sort: [ [1], [2], [4], [5], [9] ]\nsubarrays for natural merge sort: [ [1,2], [4,5], [9] ]\n*/\nvar test = require('ava')\n\ntest('split an array in two', t => {\n\n    var array = [ 1, 2, 4, 5, 9 ]\n    const act = split(array)\n    const exp = [ [1,2] [4,5,9] ]\n\n    t.deepEqual(act, exp)\n\n    t.fail()\n\n})\n\n"]}
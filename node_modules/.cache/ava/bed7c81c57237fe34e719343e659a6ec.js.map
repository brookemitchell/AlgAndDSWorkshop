{"version":3,"sources":["bubbleSort.js"],"names":["test","require","bubbleSort","arr","t","truthy","act","exp"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;AACtB,WAAOA,GAAP;AACH;;AAEDH,KAAK,uBAAL,EAA8B,aAAK;AAAA;;AAC/B,QAAIG,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAC,MAAEC,MAAF,uBAASH,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAII,MAAMJ,WAAWC,GAAX,CAAV;AACA,QAAII,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AAEH,CARD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\nfunction bubbleSort (arr) {\n    return arr\n}\n\ntest('implement bubble sort', t => {\n    var arr = [3, 5, 1]\n\n    t.truthy(bubbleSort)\n\n    var act = bubbleSort(arr)\n    var exp = [1, 2, 3]\n    \n})\n"]}
{"version":3,"sources":["bubbleSort.js"],"names":["test","require","bubbleSort","arr","x","length","i","currentVal","nextVal","t","truthy","arr2","arr3","act","exp","deepEqual","act2","exp2","act3","exp3"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;;AAEtB,SAAK,IAAIC,IAAID,IAAIE,MAAjB,EAAyBD,KAAK,CAA9B,EAAkCA,GAAlC,EAAuC;;AAEnC,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,gBAAIC,aAAaJ,IAAIG,CAAJ,CAAjB;AACA,gBAAIE,UAAUL,IAAIG,IAAE,CAAN,CAAd;;AAEA,gBAAIE,WAAWL,IAAIG,CAAJ,IAASH,IAAIG,IAAE,CAAN,CAAxB,EAAiC;AAC7BH,oBAAIG,CAAJ,IAASE,OAAT;AACAL,oBAAIG,IAAE,CAAN,IAAWC,UAAX;AACH;AACJ;AAEJ;AACD,WAAOJ,GAAP;AACH;;AAEDH,KAAK,uBAAL,EAA8B,aAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAC/BS,MAAEC,MAAF,uBAASR,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,QAAIC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;AACA,QAAIQ,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,GAAlC,EAAuC,CAAvC,EAA0C,CAA1C,CAAX;AACA,QAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;;AAGA,QAAIC,MAAMX,WAAWC,GAAX,CAAV;AACA,QAAIW,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAL,MAAEM,SAAF,yBAAYF,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIX,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAM,MAAEC,MAAF,yBAASR,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIc,OAAOd,WAAWS,IAAX,CAAX;AACA,QAAIM,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,CAAX;AACAR,MAAEM,SAAF,yBAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAID,OAAOd,WAAWS,IAAX,CAAX;AACA,QAAIM,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACAR,MAAEM,SAAF,yBAAYG,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,CAvBD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\nfunction bubbleSort (arr) {\n\n    for (var x = arr.length; x >= 0 ; x--) {\n\n        for (var i = 0; i < x; i++) {\n            var currentVal = arr[i]\n            var nextVal = arr[i+1]\n\n            if (nextVal && arr[i] > arr[i+1]){\n                arr[i] = nextVal\n                arr[i+1] = currentVal\n            }\n        }\n\n    }\n    return arr\n}\n\ntest('implement bubble sort', t => {\n    t.truthy(bubbleSort)\n    var arr = [3, 5, 1]\n    var arr2 = [3, 3, 4, 4562, 3245, 2345, 1234, 134, 5, 1]\n    var arr3 = [1, 2, 3]\n\n\n    var act = bubbleSort(arr)\n    var exp = [1, 3, 5]\n\n    t.deepEqual(act, exp)\n\n    var arr = [3, 5, 1]\n\n    t.truthy(bubbleSort)\n\n    var act2 = bubbleSort(arr2)\n    var exp2 = [1, 3, 3, 4, 5 , 134, 1234, 2345, 3245, 4562]\n    t.deepEqual(act2, exp2)\n\n    var act2 = bubbleSort(arr2)\n    var exp2 = [1, 2, 3]\n    t.deepEqual(act3, exp3)\n})\n"]}
'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

/*
  QUICK SORT
  *** Description
  Like merge sort, quick sort employs a divide and conquer strategy.
  It has a partitioning step, in which you pick an element (called a pivot) and partition the array so that all smaller elements come before pivot and all larger elements come after. The pivot will be in its final position. Recursively apply this to the subarray of smaller elements and the subarray of larger elements.
  *** Exercises
  - Write a partition helper function. For choice of pivot, for a basic implementation, we recommend choosing either the first or last element in the subarray. If you need hints, look up the Lumoto partiton scheme. Test this out before moving forward!
  - Implement quicksort
  - Identify time complexity
  - Consider implications for choice of pivot (https://en.wikipedia.org/wiki/Quicksort#Choice_of_pivot)
  *** Extra Credit
  Variants:
  - Implement a multi-pivot quicksort (ex: partition into 3 subarrays using 2 pivots)
*/
var test = require('ava');

function swap(arr) {
    var lo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var hi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length - 1;


    while (!(lo === hi)) {
        if (arr[lo] <= arr[hi]) {
            lo++;
        } else {
            var pivVal = arr[hi];
            // swap pivLoc and pivot
            arr[hi] = arr[lo]; // [ 1, 4, 2, 9, 7, 8 ]
            arr[lo] = arr[hi - 1]; // [ 1, 7, 2, 9, 4, 8 ]
            arr[hi - 1] = pivVal;
            hi--;
        }
    }
    return arr;
}

test('swaps pivot to correct point', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var arr = [1, 8, 2, 9, 7, 4];
    var act = swap(arr);
    var exp = [1, 2, 4, 9, 7, 8];
    console.log(act);

    t.deepEqual(_rec._expr(_rec._capt(act, 'arguments/0'), {
        content: 't.deepEqual(act, exp)',
        filepath: 'quickSort.js',
        line: 43,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act","range":[12,15]},{"type":"Identifier","name":"exp","range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act","range":[12,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"name"},"value":"exp","range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec2._expr(_rec2._capt(exp, 'arguments/1'), {
        content: 't.deepEqual(act, exp)',
        filepath: 'quickSort.js',
        line: 43,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act","range":[12,15]},{"type":"Identifier","name":"exp","range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act","range":[12,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"name"},"value":"exp","range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var arr2 = [8, 2, 9, 7, 4];
    var act2 = swap(arr2);
    var exp2 = [2, 4, 9, 7, 8];

    console.log(act2);
    t.deepEqual(_rec3._expr(_rec3._capt(act2, 'arguments/0'), {
        content: 't.deepEqual(act2, exp2)',
        filepath: 'quickSort.js',
        line: 51,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act2","range":[12,16]},{"type":"Identifier","name":"exp2","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act2","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp2","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec4._expr(_rec4._capt(exp2, 'arguments/1'), {
        content: 't.deepEqual(act2, exp2)',
        filepath: 'quickSort.js',
        line: 51,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act2","range":[12,16]},{"type":"Identifier","name":"exp2","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act2","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp2","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var arr3 = [9, 7, 4];
    var act3 = swap(arr3);
    var exp3 = [4, 7, 9];

    console.log(act3);
    t.deepEqual(_rec5._expr(_rec5._capt(act3, 'arguments/0'), {
        content: 't.deepEqual(act3, exp3)',
        filepath: 'quickSort.js',
        line: 59,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act3","range":[12,16]},{"type":"Identifier","name":"exp3","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act3","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp3","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec6._expr(_rec6._capt(exp3, 'arguments/1'), {
        content: 't.deepEqual(act3, exp3)',
        filepath: 'quickSort.js',
        line: 59,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act3","range":[12,16]},{"type":"Identifier","name":"exp3","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act3","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp3","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});
//# sourceMappingURL=../node_modules/.cache/ava/fbadf30b1891a05f392de1d84c6bc93f.js.map
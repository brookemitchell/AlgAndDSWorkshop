{"version":3,"sources":["insert.js"],"names":["test","require"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;;AAEAD,KAAK,0BAAL","file":"insert.js","sourcesContent":["/*\n  INSERTION SORT\n  *** Description\n  Iterate over array and grow a sorted array behind current element.\n  For each position, compare value of element with previous elements and swap positions if previous element is larger.\n  example:\n  [ 3 4 5|1 2 6 ]\n  sorted|unsorted\n  swaps:\n  [ 3 4 1 5|2 6 ]\n  [ 3 1 4 5|2 6 ]\n  [ 1 3 4 5|2 6 ]\n  now repeat for next unsorted element\n  *** Exercises\n  - Implement insertion sort for array of numbers\n  - Identify time complexity\n  - Modify function to take comparator function. specify default if not provided (check out native Array.sort comparator function for reference)\n  - Use your comparator function to verify that your sort is stable by taking input: [{value: 15}, {value: 10, order: 1}, {value: 10, order: 2}]\n  *** Extra credit\n  - Implement shell sort, a generalization of insertion sort\n  (https://en.wikipedia.org/wiki/Shellsort)\n*/\n\nvar test = require('ava')\n\ntest('implement insertion sort')\n"]}
{"version":3,"sources":["bubbleSort.js"],"names":["test","require","t","truthy","bubbleSort"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeAD,KAAK,uBAAL,EAA8B,aAAK;AAAA;;AAE/BE,IAAEC,MAAF,uBAASC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,CAJD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\ntest('implement bubble sort', t => {\n\n    t.truthy(bubbleSort)\n    \n})\n"]}
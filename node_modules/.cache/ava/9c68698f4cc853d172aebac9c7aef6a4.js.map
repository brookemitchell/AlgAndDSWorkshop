{"version":3,"sources":["bubbleSort.js"],"names":["test","require","bubbleSort","arr","x","length","i","currentVal","nextVal","console","log","t","truthy","act","exp","deepEqual"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;;AAEtB,SAAK,IAAIC,IAAID,IAAIE,MAAjB,EAAyBD,KAAK,CAA9B,EAAkCA,GAAlC,EAAuC;;AAEnC,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AACxB,gBAAIC,aAAaJ,IAAIG,CAAJ,CAAjB;AACA,gBAAIE,UAAUL,IAAIG,IAAE,CAAN,CAAd;;AAEA,gBAAIE,WAAWL,IAAIG,CAAJ,IAASH,IAAIG,IAAE,CAAN,CAAxB,EAAiC;AAC7BH,oBAAIG,CAAJ,IAASE,OAAT;AACAL,oBAAIG,IAAE,CAAN,IAAWC,UAAX;AACH;AACDE,oBAAQC,GAAR,CAAYP,GAAZ;AACH;AAEJ;AACD,WAAOA,GAAP;AACH;;AAEDH,KAAK,uBAAL,EAA8B,aAAK;AAAA;AAAA;AAAA;;AAC/B,QAAIG,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAQ,MAAEC,MAAF,uBAASV,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIW,MAAMX,WAAWC,GAAX,CAAV;AACA,QAAIW,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAH,MAAEI,SAAF,yBAAYF,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,CAVD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\nfunction bubbleSort (arr) {\n\n    for (var x = arr.length; x >= 0 ; x--) {\n\n        for (var i = 0; i < x; i++) {\n            var currentVal = arr[i]\n            var nextVal = arr[i+1]\n\n            if (nextVal && arr[i] > arr[i+1]){\n                arr[i] = nextVal\n                arr[i+1] = currentVal\n            }\n            console.log(arr);\n        }\n\n    }\n    return arr\n}\n\ntest('implement bubble sort', t => {\n    var arr = [3, 5, 1]\n\n    t.truthy(bubbleSort)\n\n    var act = bubbleSort(arr)\n    var exp = [1, 3, 5]\n\n    t.deepEqual(act, exp)\n\n})\n"]}
'use strict';

var _defineProperty2 = require('/Users/brooke/Projects/AlgAndDSWorkshop/node_modules/babel-runtime/helpers/defineProperty.js');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('/Users/brooke/Projects/AlgAndDSWorkshop/node_modules/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');

function Stack(capacity) {
    // implement me...
    this.storage = {};
    this.last = undefined;
    this.count = 0;
    this.capacity = capacity;
}

Stack.prototype.push = function (value) {

    if (this.count >= this.capacity) {
        return "Max capacity already reached. Remove element before adding a new one.";
    }

    this.storage = (0, _assign2.default)(this.storage, (0, _defineProperty3.default)({}, this.count, value));
    this.last = value;
    this.count += 1;
    return this.count;
};
// Time complexity:

Stack.prototype.pop = function () {
    // implement me...
    var oldLast = this.last;
    this.count -= 1;
    delete this.storage[this.count];
    this.last = this.storage[this.count - 1];
    return oldLast;
};
// Time complexity:

Stack.prototype.peek = function () {
    return this.last;
};
// Time complexity:

Stack.prototype.count = function () {
    return this.count;
};

Stack.prototype.findMe = function (el) {

    if (!this.last) {
        return false;
    }

    for (var i = this.count - 1; i >= 0; i--) {
        if (this.storage[i] == el) {
            return true;
        }
    }
    return false;
};

test.beforeEach(function (t) {
    t.context.s0 = new Stack(0);
    t.context.s1 = new Stack(3);
    t.context.s1.push('one');
    t.context.s1.push('two');
    t.context.s1.push('four');
    t.context.s2 = new Stack(5);
});

test('method findMe to check if value is in stack', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var _t$context = t.context;
    var s0 = _t$context.s0;
    var s1 = _t$context.s1;
    var s2 = _t$context.s2;


    var act0 = s0.findMe('two');
    var exp0 = false;

    var act = s1.findMe('two');
    var exp = true;

    t.is(_rec._expr(_rec._capt(act, 'arguments/0'), {
        content: 't.is(act, exp)',
        filepath: 'stackObject.js',
        line: 80,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec2._expr(_rec2._capt(exp, 'arguments/1'), {
        content: 't.is(act, exp)',
        filepath: 'stackObject.js',
        line: 80,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var act2 = s1.findMe('NotThere');
    var exp2 = false;

    t.is(_rec3._expr(_rec3._capt(act2, 'arguments/0'), {
        content: 't.is(act2, exp2)',
        filepath: 'stackObject.js',
        line: 85,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act2","range":[5,9]},{"type":"Identifier","name":"exp2","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act2","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp2","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec4._expr(_rec4._capt(exp2, 'arguments/1'), {
        content: 't.is(act2, exp2)',
        filepath: 'stackObject.js',
        line: 85,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act2","range":[5,9]},{"type":"Identifier","name":"exp2","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act2","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp2","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});

Stack.prototype.until = function until(val) {

    if (this.count === 0) {
        return false;
    }

    return 3;
};

test.only('number of pops until get certain value', function (t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder(),
        _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var _t$context2 = t.context;
    var s0 = _t$context2.s0;
    var s1 = _t$context2.s1;
    var s2 = _t$context2.s2;

    var act = s1.until('one');
    var exp = 3;

    t.is(_rec5._expr(_rec5._capt(act, 'arguments/0'), {
        content: 't.is(act, exp)',
        filepath: 'stackObject.js',
        line: 103,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec6._expr(_rec6._capt(exp, 'arguments/1'), {
        content: 't.is(act, exp)',
        filepath: 'stackObject.js',
        line: 103,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act","range":[5,8]},{"type":"Identifier","name":"exp","range":[10,13]}],"range":[0,14]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act","range":[5,8]},{"type":{"label":","},"range":[8,9]},{"type":{"label":"name"},"value":"exp","range":[10,13]},{"type":{"label":")"},"range":[13,14]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var act1 = s0.until('one');
    var exp1 = false;

    t.is(_rec7._expr(_rec7._capt(act1, 'arguments/0'), {
        content: 't.is(act1, exp1)',
        filepath: 'stackObject.js',
        line: 108,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act1","range":[5,9]},{"type":"Identifier","name":"exp1","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act1","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp1","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec8._expr(_rec8._capt(exp1, 'arguments/1'), {
        content: 't.is(act1, exp1)',
        filepath: 'stackObject.js',
        line: 108,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act1","range":[5,9]},{"type":"Identifier","name":"exp1","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act1","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp1","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var act2 = s1.until('four');
    var exp2 = 1;

    t.is(_rec9._expr(_rec9._capt(act2, 'arguments/0'), {
        content: 't.is(act2, exp2)',
        filepath: 'stackObject.js',
        line: 113,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act2","range":[5,9]},{"type":"Identifier","name":"exp2","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act2","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp2","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec10._expr(_rec10._capt(exp2, 'arguments/1'), {
        content: 't.is(act2, exp2)',
        filepath: 'stackObject.js',
        line: 113,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"Identifier","name":"act2","range":[5,9]},{"type":"Identifier","name":"exp2","range":[11,15]}],"range":[0,16]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"act2","range":[5,9]},{"type":{"label":","},"range":[9,10]},{"type":{"label":"name"},"value":"exp2","range":[11,15]},{"type":{"label":")"},"range":[15,16]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});
//# sourceMappingURL=node_modules/.cache/ava/746ca7f4e5984e1a8f885ecf6f12d368.js.map
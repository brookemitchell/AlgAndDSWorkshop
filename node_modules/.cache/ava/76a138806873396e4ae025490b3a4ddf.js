'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
/*
  Bubble SORT
  *** Description
  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array
  *** Exercises
  - Implement bubble sort
  - Identify time complexity
  Optimizations:
  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?
  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.
  Variants:
  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?
  (https://en.wikipedia.org/wiki/Cocktail_sort)
*/

function bubbleSort(arr) {

    for (var x = arr.length; x >= 0; x--) {

        var preSorted = true;
        for (var i = 0; i < x; i++) {
            var currentVal = arr[i];
            var nextVal = arr[i + 1];

            if (nextVal && arr[i] > arr[i + 1]) {
                arr[i] = nextVal;
                arr[i + 1] = currentVal;
                preSorted = false;
            }
        }
        if (preSorted) return arr;
    }
    return arr;
}

test('implement bubble sort', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder(),
        _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    t.truthy(_rec._expr(_rec._capt(bubbleSort, 'arguments/0'), {
        content: 't.truthy(bubbleSort)',
        filepath: 'bubbleSort.js',
        line: 39,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"bubbleSort","range":[9,19]}],"range":[0,20]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"bubbleSort","range":[9,19]},{"type":{"label":")"},"range":[19,20]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
    var arr = [3, 5, 1];
    var arr2 = [3, 3, 4, 4562, 3245, 2345, 1234, 134, 5, 1];
    var arr3 = [1, 2, 3];

    var act = bubbleSort(arr);
    var exp = [1, 3, 5];

    t.deepEqual(_rec2._expr(_rec2._capt(act, 'arguments/0'), {
        content: 't.deepEqual(act, exp)',
        filepath: 'bubbleSort.js',
        line: 48,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act","range":[12,15]},{"type":"Identifier","name":"exp","range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act","range":[12,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"name"},"value":"exp","range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec3._expr(_rec3._capt(exp, 'arguments/1'), {
        content: 't.deepEqual(act, exp)',
        filepath: 'bubbleSort.js',
        line: 48,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act","range":[12,15]},{"type":"Identifier","name":"exp","range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act","range":[12,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"name"},"value":"exp","range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var arr = [3, 5, 1];

    t.truthy(_rec4._expr(_rec4._capt(bubbleSort, 'arguments/0'), {
        content: 't.truthy(bubbleSort)',
        filepath: 'bubbleSort.js',
        line: 52,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"bubbleSort","range":[9,19]}],"range":[0,20]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"bubbleSort","range":[9,19]},{"type":{"label":")"},"range":[19,20]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var act2 = bubbleSort(arr2);
    var exp2 = [1, 3, 3, 4, 5, 134, 1234, 2345, 3245, 4562];
    t.deepEqual(_rec5._expr(_rec5._capt(act2, 'arguments/0'), {
        content: 't.deepEqual(act2, exp2)',
        filepath: 'bubbleSort.js',
        line: 56,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act2","range":[12,16]},{"type":"Identifier","name":"exp2","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act2","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp2","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec6._expr(_rec6._capt(exp2, 'arguments/1'), {
        content: 't.deepEqual(act2, exp2)',
        filepath: 'bubbleSort.js',
        line: 56,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act2","range":[12,16]},{"type":"Identifier","name":"exp2","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act2","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp2","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    var act3 = bubbleSort(arr3);
    var exp3 = [1, 2, 3];
    t.deepEqual(_rec7._expr(_rec7._capt(act3, 'arguments/0'), {
        content: 't.deepEqual(act3, exp3)',
        filepath: 'bubbleSort.js',
        line: 60,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act3","range":[12,16]},{"type":"Identifier","name":"exp3","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act3","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp3","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), _rec8._expr(_rec8._capt(exp3, 'arguments/1'), {
        content: 't.deepEqual(act3, exp3)',
        filepath: 'bubbleSort.js',
        line: 60,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"act3","range":[12,16]},{"type":"Identifier","name":"exp3","range":[18,22]}],"range":[0,23]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"act3","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"name"},"value":"exp3","range":[18,22]},{"type":{"label":")"},"range":[22,23]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});
//# sourceMappingURL=../node_modules/.cache/ava/76a138806873396e4ae025490b3a4ddf.js.map
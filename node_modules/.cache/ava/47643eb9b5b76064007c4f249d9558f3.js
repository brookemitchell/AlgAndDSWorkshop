'use strict';

var _defineProperty2 = require('/Users/brooke/Projects/AlgAndDSWorkshop/node_modules/babel-runtime/helpers/defineProperty.js');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('/Users/brooke/Projects/AlgAndDSWorkshop/node_modules/babel-runtime/core-js/object/assign.js');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');

function Stack(capacity) {
    // implement me...
    this.storage = {};
    this.last = undefined;
    this.count = 0;
    this.capacity = capacity;
}

Stack.prototype.push = function (value) {

    if (this.count >= this.capacity) {
        return "Max capacity already reached. Remove element before adding a new one.";
    }

    this.storage = (0, _assign2.default)(this.storage, (0, _defineProperty3.default)({}, this.count, value));
    this.last = value;
    this.count += 1;
    return this.count;
};
// Time complexity:

Stack.prototype.pop = function () {
    // implement me...
    var oldLast = this.last;
    this.count -= 1;
    delete this.storage[this.count];
    this.last = this.storage[this.count - 1];
    return oldLast;
};
// Time complexity:

Stack.prototype.peek = function () {
    return this.last;
};
// Time complexity:

Stack.prototype.count = function () {
    return this.count;
};

test.beforeEach(function (t) {
    t.context.s1 = new Stack(3);
    t.context.s1.push('one');
    t.context.s1.push('two');
    t.context.s1.push('four');
    t.context.s2 = new Stack(5);
});

test('method findMe to check if value is in stack', function (t) {
    var s1 = t.context.s1;

    var act = s1.findMe('two');
    var exp = true;

    var act2 = s1.findeMe('NotThere');

    t.fail();
});
//# sourceMappingURL=node_modules/.cache/ava/47643eb9b5b76064007c4f249d9558f3.js.map
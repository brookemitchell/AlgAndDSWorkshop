{"version":3,"sources":["bubbleSort.js"],"names":["test","require","bubbleSort","arr","i","length","currentVal","console","log","t","truthy","act","exp","deepEqual"],"mappings":";;;;;AAAA,IAAIA,OAAOC,QAAQ,KAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;;AAEtB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,IAAIE,MAAxB,EAAgCD,GAAhC,EAAqC;AACjC,YAAIE,aAAaH,IAAIC,CAAJ,CAAjB;AACA,YAAID,IAAIC,CAAJ,IAASD,IAAIC,IAAE,CAAN,CAAb,EAAsB;AAClBD,gBAAIC,CAAJ,IAASD,IAAIC,IAAE,CAAN,CAAT;AACAD,gBAAIC,IAAI,CAAR,IAAaD,IAAIC,CAAJ,CAAb;AACH;AACDG,gBAAQC,GAAR,CAAYL,IAAIC,CAAJ,CAAZ;AACH;;AAED,WAAOD,GAAP;AACH;;AAEDH,KAAK,uBAAL,EAA8B,aAAK;AAAA;AAAA;AAAA;;AAC/B,QAAIG,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAM,MAAEC,MAAF,uBAASR,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIS,MAAMT,WAAWC,GAAX,CAAV;AACA,QAAIS,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AAEAH,MAAEI,SAAF,yBAAYF,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiBC,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,CAVD","file":"bubbleSort.js","sourcesContent":["var test = require('ava')\n/*\n  Bubble SORT\n  *** Description\n  Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array\n  *** Exercises\n  - Implement bubble sort\n  - Identify time complexity\n  Optimizations:\n  - Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?\n  - For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.\n  Variants:\n  - Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?\n  (https://en.wikipedia.org/wiki/Cocktail_sort)\n*/\n\nfunction bubbleSort (arr) {\n\n    for (var i = 0; i < arr.length; i++) {\n        var currentVal = arr[i]\n        if (arr[i] > arr[i+1]){\n            arr[i] = arr[i+1]\n            arr[i + 1] = arr[i]\n        }\n        console.log(arr[i]);\n    }\n\n    return arr\n}\n\ntest('implement bubble sort', t => {\n    var arr = [3, 5, 1]\n\n    t.truthy(bubbleSort)\n\n    var act = bubbleSort(arr)\n    var exp = [1, 2, 3]\n\n    t.deepEqual(act, exp)\n    \n})\n"]}
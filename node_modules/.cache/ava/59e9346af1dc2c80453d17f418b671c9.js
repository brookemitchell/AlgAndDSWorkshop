'use strict';

var test = require('ava');
var Stack = require('./stackObject.js');
// 1. Implement a stack with a min method which returns the minimum element currently in the stack. This method should have O(1) time complexity. Make sure your implementation handles duplicates.

test.beforeEach(function (t) {
    t.context.s0 = new Stack(0);
    t.context.s1 = new Stack(5);
    t.context.s2 = new Stack(10);
    t.context.s1.push(3);
    t.context.s1.push(1);
    t.context.s1.push(3);
    t.context.s1.push(4);
    t.context.s1.push(4);

    // t.context.s1.push(9)
    // t.context.s1.push(13)
    // t.context.s1.push(8)
    // t.context.s1.push(81)
    // t.context.s1.push(4)
    // t.context.s1.push(4)
    // t.context.s1.push(8)
});

test('implement min method', function (t) {

    // var {s1} = t.context
    // t.is(typeof s1.min, 'function')

    // var act = s1.min()
    // var exp = 1

    // t.is(act, exp)

    // var act1 = s1.min()
    // var exp1 = 4

    // console.log(s1._min);
    // t.is(act1, exp1)
});
//# sourceMappingURL=node_modules/.cache/ava/59e9346af1dc2c80453d17f418b671c9.js.map